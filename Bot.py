import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message
from aiogram.filters import Command
import requests
from bs4 import BeautifulSoup
from aiogram.enums import ParseMode
from aiogram.types import URLInputFile, FSInputFile
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import sql
from dotenv import load_dotenv
import os
import random
from PIL import Image


load_dotenv()
bot = Bot(os.getenv('TOKEN'))
dp = Dispatcher()


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å? üíº"),
        types.KeyboardButton(text="–ö–∏–Ω—É—Ç—å –∫—É–±–∏–∫ üé≤")
    )
    builder.row(types.KeyboardButton(text="C–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–æ—Ä–∞–º üóÉÔ∏è"))
    builder.row(types.KeyboardButton(text="–°–ª—É—á–∞–π–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ –ö–∏–±–µ—Ä–ø–∞–Ω–∫–∞ üì∏"))
    await message.answer(f"Nice to see you, mate {message.from_user.first_name}",
                         reply_markup=builder.as_markup(resize_keyboard=True))


@dp.message(F.photo)
async def photo_msg(message: Message):
    await message.answer("–≠—Ç–æ —Ç–æ—á–Ω–æ –∫–∞–∫–æ–µ-—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")


@dp.message(F.text == "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å? üíº")
async def opportunity(message: Message):
    await message.answer("–ú–æ–≥—É –∫–∏–Ω—É—Ç—å –∫—É–±–∏–∫ ‚úÖ")
    await message.answer("–ú–æ–≥—É —Å–∫–∏–Ω—É—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã—à–µ–¥—à–∏—Ö —Å–µ—Ä–∏–π –¥–æ—Ä–∞–º—ã –Ω–∞ –≤—ã–±–æ—Ä ‚úÖ\n"
                         "–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏: <b>–ü—Ä–æ–≤–µ—Ä—å <u>–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Ä–∞–º—ã —Ç—Ä–∞–Ω—Å–ª–∏—Ç–æ–º</u></b> ‚úèÔ∏è",
                         parse_mode=ParseMode.HTML)
    await message.answer("–ú–æ–≥—É –≤—ã–≤–µ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–æ—Ä–∞–º—ã ‚úÖ")
    await message.answer("–ú–æ–≥—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ—Ä–∞–º—É ‚úÖ\n"
                         "–î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ: <b>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å <u>–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Ä–∞–º—ã —Ç—Ä–∞–Ω—Å–ª–∏—Ç–æ–º</u> –ö–õ–Æ–ß</b> ‚úèÔ∏è",
                         parse_mode=ParseMode.HTML)
    await message.answer("–ú–æ–≥—É —É–¥–∞–ª–∏—Ç—å –¥–æ—Ä–∞–º—É ‚úÖ\n"
                         "–î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ: <b>–£–¥–∞–ª–∏—Ç—å <u>–∫–ª—é—á –¥–æ—Ä–∞–º—ã</u></b> ‚úèÔ∏è",
                         parse_mode=ParseMode.HTML)
    await message.answer("–ú–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω ‚úÖ\n"
                         "–î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ: <b>–°–∫—Ä–∏–Ω—à–æ—Ç</b> ‚úèÔ∏è",
                         parse_mode=ParseMode.HTML)


@dp.message(F.text == "–ö–∏–Ω—É—Ç—å –∫—É–±–∏–∫ üé≤")
async def cmd_dice(message: Message):
    await message.answer_dice(emoji="üé≤",)


@dp.message(lambda msg: any(word in msg.text.lower() for word in ["ghjdthm", "–ø—Ä–æ–≤–µ—Ä—å"]))
async def parser(message: Message):
        get_mess_text = message.text.split()[1]
        url = f"https://doramalive.info/dorama/{get_mess_text.lower()}/"
        headers = {"user-agent": "Mozilla/5.0"}
        response = requests.get(url, headers=headers)
        html = response.text
        soup = BeautifulSoup(html, "lxml")
        #–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–∏–ª—å–º.
        film_check = soup.find("div", class_="col-lg-12")
        film = film_check.find("h1").text
        result = ""
        if film.split()[0] == "–§–∏–ª—å–º":
            try:
                href = soup.find("a", class_="btn btn-danger start")
                link = "https://doramalive.info" + href["href"]
                #name_f –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ñ–∏–ª—å–º–∞
                response_f = requests.get(link, headers=headers)
                html_f = response_f.text
                soup_f = BeautifulSoup(html_f, "html.parser")
                table = soup_f.find("table", class_="table table-hover table-trans")
                tbody = table.find("tbody")
                for i in tbody:
                    if i == "\n":
                        continue
                    else:
                        result += (f""
                                   f"–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫: {' '.join(i.text.split()[:2])}\n"
                                   f"–¢–∏–ø –æ–∑–≤—É—á–∫–∏: {' '.join(i.text.split()[2:-1])}\n\n"
                                   f"")
                img = soup.find("div", class_="cover-dorama")
                link = img.find("img")
                image_from_url = URLInputFile("https://doramalive.info" + link["src"])
                await message.answer_photo(image_from_url,
                                               caption=f"–°—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–æ–¥–∞ —Ñ–∏–ª—å–º–∞\nüé¨<b>{' '.join(film.split()[1:])}</b>:"
                                                       f"\n{result}",
                                               parse_mode=ParseMode.HTML)
            except AttributeError:
                await message.answer(f"C—Ç—Ä–∞–Ω–∏—Ü—ã {get_mess_text.lower()} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            except TypeError:
                premiere = soup.find("div", class_="alert-new premieres")
                await message.answer(premiere.text)
        else:
            try:
                    series = soup.find("ul", class_="dropdown-menu min episodes-list")
                    lines = series.find_all('li')
                    img = soup.find("div", class_="cover-dorama")
                    link = img.find("img")
                    image_from_url = URLInputFile("https://doramalive.info" + link["src"])
                    for line in lines:
                        result += line.text + "\n"
                    await message.answer_photo(image_from_url,
                                               caption=f"–°—Ç–∞—Ç—É—Å —Å–µ—Ä–∏–π –¥–æ—Ä–∞–º—ã\nüé¨<b>{' '.join(film.split()[1:])}</b>:"
                                                       f" \n{result}",
                                               parse_mode=ParseMode.HTML)
            except:
                premiere = soup.find("div", class_="alert-new premieres")
                if premiere:
                    await message.answer("–ñ–¥–µ–º –ø–µ—Ä–µ–≤–æ–¥")
                else:
                    await message.answer(f"C—Ç—Ä–∞–Ω–∏—Ü—ã {get_mess_text.lower()} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")



@dp.message(F.text == "C–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–æ—Ä–∞–º üóÉÔ∏è")
async def get_drams(message: Message):
    struct = sql.get_value()
    if not struct:
        await message.answer("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–æ—Ä–∞–º üóí")

    else:
        answer_block = ""
        for i in range(len(struct)):
            answer_block += (f"üîë {str(struct[i][0])}  üíæ <code>–ü—Ä–æ–≤–µ—Ä—å {str(struct[i][1])}</code>\n\n")
        await message.answer(answer_block, parse_mode=ParseMode.HTML)


@dp.message(lambda msg: any(word in msg.text.lower() for word in ["cj[hfybnm", "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å"]))
async def save_drams(message: Message):
    get_mess_text = message.text.split()[1]
    index = message.text.split()[2]
    try:
        sql.set_value(get_mess_text, index)
        await message.answer("–î–æ—Ä–∞–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞üìù")
    except Exception as error:
        await message.answer(f'–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ({error})')

@dp.message(lambda msg: any(word in msg.text.lower() for word in ["elfkbnm", "—É–¥–∞–ª–∏—Ç—å"]))
async def delete(message: Message):
    get_mess_text = message.text.split()[1]
    try:
        sql.delete(get_mess_text)
        await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ üóë")
    except Exception as error:
        await message.answer(f"–¢–∞–±–ª–∏—Ü–∞ –¥–æ—Ä–∞–º –ø—É—Å—Ç–∞ üóí\n –ò–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ({error}).")


#–ö–æ–¥ –¥–ª—è —Å–∫—Ä–∏–Ω–æ–≤, –≤ —Å–ª—É—á–∏–µ, –µ—Å–ª–∏ –ø–∞–ø–∫–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
@dp.message(lambda msg: any(word in msg.text.lower() for word in ["crhbyijn", "—Å–∫—Ä–∏–Ω—à–æ—Ç"]))
async def random_scr_cyber(message: Message):
    try:
        file = os.listdir('C:/Users/morga/PycharmProjects/Pitonchik/Screenshots')
        random_choice = random.choice(file)
        image_path = os.path.join("C:/Users/morga/PycharmProjects/Pitonchik/Screenshots/", random_choice)
        #print(int(os.path.getsize(image_path)) / 1048576)
        if int(os.path.getsize(image_path)) / 1048576 > 2:
            with Image.open(image_path) as img:
                img = img.convert("RGB")
                img.save(image_path, "JPEG", quality=100)
        #print(int(os.path.getsize(image_path)) / 1048576)
        img_to_send = FSInputFile(image_path)
        await message.answer_photo(img_to_send)
    except Exception as error:
        await message.answer(f"–°–∫—Ä–∏–Ω–æ–≤ –Ω–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ ({error}).")


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

